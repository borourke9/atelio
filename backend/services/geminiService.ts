interface GenerateCompositeParams {
  sceneUrl: string;
  productUrl: string;
  replaceRegion: {
    x: number;
    y: number;
    width: number;
    height: number;
  };
}

interface GoogleAIResponse {
  generatedImages: Array<{
    uri: string;
  }>;
}

export async function generateComposite(params: GenerateCompositeParams): Promise<string> {
  const { sceneUrl, productUrl, replaceRegion } = params;
  
  if (!process.env.GOOGLE_API_KEY) {
    throw new Error('GOOGLE_API_KEY not found in environment variables');
  }

  const prompt = `Replace the furniture in the specified region with the product from the reference image. Preserve the exact product identity (color, texture, shape, material) while integrating it naturally into the scene. Remove the old furniture completely and ensure the new product matches the lighting, shadows, and perspective of the room. The replacement should look photorealistic and seamless.`;

  const requestBody = {
    prompt: prompt,
    image: {
      data: sceneUrl,
      mimeType: "image/jpeg"
    },
    productImage: {
      data: productUrl,
      mimeType: "image/jpeg"
    },
    replaceRegion: {
      x: replaceRegion.x,
      y: replaceRegion.y,
      width: replaceRegion.width,
      height: replaceRegion.height
    },
    safetySettings: [
      {
        category: "HARM_CATEGORY_HARASSMENT",
        threshold: "BLOCK_MEDIUM_AND_ABOVE"
      },
      {
        category: "HARM_CATEGORY_HATE_SPEECH", 
        threshold: "BLOCK_MEDIUM_AND_ABOVE"
      },
      {
        category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        threshold: "BLOCK_MEDIUM_AND_ABOVE"
      },
      {
        category: "HARM_CATEGORY_DANGEROUS_CONTENT",
        threshold: "BLOCK_MEDIUM_AND_ABOVE"
      }
    ],
    generationConfig: {
      temperature: 0.4,
      topK: 32,
      topP: 1,
      maxOutputTokens: 2048,
    }
  };

  try {
    const response = await fetch('https://generativelanguage.googleapis.com/v1beta/images:generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Goog-Api-Key': process.env.GOOGLE_API_KEY,
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Google AI API error: ${response.status} - ${errorText}`);
    }

    const data: GoogleAIResponse = await response.json();
    
    if (!data.generatedImages || data.generatedImages.length === 0) {
      throw new Error('No images generated by Google AI API');
    }

    return data.generatedImages[0].uri;
  } catch (error) {
    console.error('Google AI API call failed:', error);
    throw error;
  }
}

